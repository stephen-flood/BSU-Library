##DESCRIPTION
##  Problem Description
##ENDDESCRIPTION

##KEYWORDS('sample')

## DBsubject('Course')
## DBchapter('Section')
## DBsection('Subsection')
## Date('3/23/2020')
## Author('Stephen Flood')
## Institution('Bridgewater State University')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')



########################################################################



DOCUMENT();

# Load whatever macros you need for the problem
loadMacros(
        "PGstandard.pl",     # Standard macros for PG language
        "PGcourse.pl",       
	"PGML.pl",
	"MathObjects.pl",
	# "PGchoicemacros.pl",	# For multiple select, multiple matching, and true/false questions
        # "PGgraphmacros.pl",	   # For dynamic graphs
    	# "parserMultiAnswer.pl",  # For answer checkers that reference MULTIPLE answer blanks
    	# "parserPopUp.pl",	   # Create popup lists for selecting entries
    	# "contextInequalities.pl",
);


# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;


##############################################################
#  Setup

Context("Numeric");
# Context()->flags->set(tolerance => 0.01);
# Context()->variables->add(t => 'Real');
# See http://webwork.maa.org/wiki/Introduction_to_contexts for more options





$a   = non_zero_random(1,4,1);
$b   = 0;
$m   = non_zero_random(1,4,1);

$c   =  non_zero_random(1,4,1);
$d   =  0;
$n   =  1;


$f = list_random( 'e^', 'sin', 'cos', 'ln'); 

$g = list_random( 'e^', 'sin', 'cos', 'ln', ''); 
$h = list_random( 'e^', 'sin', 'cos', 'ln', ''); 

$inside1 = Compute("$g($a * x^$n + $b)")->reduce();
$inside2 = Compute("$h($c * x^$m + $d)")->reduce();

$operation = list_random( '*' , '/' );

$function = Compute("$f($inside1 $operation $inside2) ")->reduce();

$functionprime = $function->D();
$functionprimeprime = $functionprime->D();


### IDEA for how to generate compositions with powers, as well as with other outside fns. 
# (use perl to define a powtwo function on strings, that returns the input string with an exponent of 2.  THEN call Compute on the NEWLY generated string)
sub powtwo {
    my ($base) = @_;  
    return '('. $base .')^2' ;
}
$somefn = powtwo($a . '*' . x . '^' . $n . '+' . $b);
$somefn = Compute("$inside1")->reduce();
### END IDEA 




#################################################
# Write Problem 
#
# PGML syntax at 
# 	http://webwork.maa.org/wiki/Introduction_to_PGML#.V8CReFQko2w
# 	http://webwork.maa.org/wiki/Category:PGML_Syntax#.V8DHHVQko2w


BEGIN_PGML

Let [`f(x) = [$function] `]. 

a. Compute [`f'(x) = `]  [__________]{"$functionprime"}.

b. Compute [`f''(x) = `]  [__________]{"$functionprimeprime"}.

END_PGML


ENDDOCUMENT();
